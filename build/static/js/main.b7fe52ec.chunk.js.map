{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Home","lazy","Projects","About","Nav","BlueNote","Embla","JoyStory","Panaseer","Pause","Spiro","NoMatchPage","App","fallback","render","location","className","TransitionGroup","CSSTransition","key","timeout","classNames","exact","path","component","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8SAYMA,EAAOC,gBAAK,kBAAM,wDAClBC,EAAWD,gBAAK,kBAAM,kCACtBE,EAAQF,gBAAK,kBAAM,+DACnBG,EAAMH,gBAAK,kBAAM,yDAIjBI,EAAWJ,gBAAK,kBAAM,8DACtBK,EAAQL,gBAAK,kBAAM,8DACnBM,EAAWN,gBAAK,kBAAM,8DACtBO,EAAWP,gBAAK,kBAAM,+DACtBQ,EAAQR,gBAAK,kBAAM,8DACnBS,EAAQT,gBAAK,kBAAM,8DAEnBU,EAAcV,gBAAK,kBAAM,kCAsChBW,EAlCH,WACV,OACE,kBAAC,IAAD,KACE,kBAAC,WAAD,CAAUC,SAAU,4CAClB,kBAAC,IAAD,CAAOC,OAAQ,gBAAGC,EAAH,EAAGA,SAAH,OACb,yBAAKC,UAAU,OACb,kBAACZ,EAAD,MACA,kBAACa,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACIC,IAAKJ,EAASI,IACdC,QAAS,IACTC,WAAW,QAEX,kBAAC,IAAD,CAAQN,SAAUA,GAChB,kBAAC,IAAD,CAAOO,OAAK,EAACC,KAAK,IAAIC,UAAWxB,IACjC,kBAAC,IAAD,CAAOsB,OAAK,EAACC,KAAK,SAASC,UAAWrB,IACtC,kBAAC,IAAD,CAAOmB,OAAK,EAACC,KAAK,YAAYC,UAAWtB,IACzC,kBAAC,IAAD,CAAOoB,OAAK,EAACC,KAAK,YAAYC,UAAWnB,IACzC,kBAAC,IAAD,CAAOiB,OAAK,EAACC,KAAK,SAASC,UAAWlB,IACtC,kBAAC,IAAD,CAAOgB,OAAK,EAACC,KAAK,YAAYC,UAAWjB,IACzC,kBAAC,IAAD,CAAOe,OAAK,EAACC,KAAK,YAAYC,UAAWhB,IACzC,kBAAC,IAAD,CAAOc,OAAK,EAACC,KAAK,SAASC,UAAWf,IACtC,kBAAC,IAAD,CAAOa,OAAK,EAACC,KAAK,SAASC,UAAWd,IACtC,kBAAC,IAAD,CAAOc,UAAWb,cCzClBc,QACW,cAA7BC,OAAOX,SAASY,UAEe,UAA7BD,OAAOX,SAASY,UAEhBD,OAAOX,SAASY,SAASC,MACvB,2DCZNC,IAASf,OACP,kBAAC,IAAMgB,WAAP,KACE,kBAAC,EAAD,OAGFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b7fe52ec.chunk.js","sourcesContent":["import React, { Suspense, lazy } from 'react';\n// Styles\nimport './css/App.css';\nimport './css/bootstrap.min.css';\nimport \"animate.css/animate.min.css\";\n\n// Installed\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n\nimport {CSSTransition,TransitionGroup} from 'react-transition-group';\n\n// Created\nconst Home = lazy(() => import('./components/Home.js'));\nconst Projects = lazy(() => import('./components/Projects.js'));\nconst About = lazy(() => import('./components/About.js'));\nconst Nav = lazy(() => import('./components/NewNav.js'));\n\n\n//Projects\nconst BlueNote = lazy(() => import('./components/projects/blueNote.js'));\nconst Embla = lazy(() => import('./components/projects/embla.js'));\nconst JoyStory = lazy(() => import('./components/projects/joyStory.js'));\nconst Panaseer = lazy(() => import('./components/projects/panaseer.js'));\nconst Pause = lazy(() => import('./components/projects/pause.js'));\nconst Spiro = lazy(() => import('./components/projects/spiro.js'));\n\nconst NoMatchPage = lazy(() => import('./components/noMatch.js'));\n\n\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <Suspense fallback={<div>Loading...</div>}>\n        <Route render={({ location }) => (\n          <div className=\"App\">\n            <Nav/>\n            <TransitionGroup>\n              <CSSTransition\n                  key={location.key}\n                  timeout={800}\n                  classNames='page'\n                  >\n                  <Switch location={location}>\n                    <Route exact path=\"/\" component={Home} />\n                    <Route exact path=\"/about\" component={About} />\n                    <Route exact path=\"/projects\" component={Projects} />\n                    <Route exact path=\"/blueNote\" component={BlueNote} />\n                    <Route exact path=\"/embla\" component={Embla} />\n                    <Route exact path=\"/joyStory\" component={JoyStory} />\n                    <Route exact path=\"/panaseer\" component={Panaseer} />\n                    <Route exact path=\"/pause\" component={Pause} />\n                    <Route exact path=\"/spiro\" component={Spiro} />\n                    <Route component={NoMatchPage} />\n                  </Switch>\n              </CSSTransition>\n            </TransitionGroup>\n          </div>\n        )}/>\n      </Suspense>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}