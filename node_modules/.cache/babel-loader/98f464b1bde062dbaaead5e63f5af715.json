{"ast":null,"code":"var _jsxFileName = \"/Users/william/Documents/GitHub/portfolio/src/components/projectPage/slideInfo.js\";\nimport React, { useState, useEffect, useRef } from 'react';\n\nfunction SlideInfo(props) {\n  const [isExpanded, toggleExpanded] = useState(false);\n  const width = useWindowWidth();\n  useEffect(() => {\n    // add when mounted\n    document.addEventListener(\"mousemove\", handleMove); // return function to be called when unmounted\n\n    return () => {\n      document.removeEventListener(\"mousemove\", handleMove);\n    };\n  }, []);\n\n  const handleMove = e => {\n    if (e.offsetX > Math.abs(width / 2)) {\n      console.log('expanded');\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"infoIcon\",\n    style: {\n      right: `${isExpanded ? '30vw' : '2vw'}`\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    className: `${isExpanded ? \"fa fa-chevron-right\" : \"fa fa-chevron-left\"}`,\n    \"aria-hidden\": \"true\",\n    onClick: () => {\n      toggleExpanded(!isExpanded);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: `slideInfo ${isExpanded ? \"expanded\" : \"collapsed\"}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  }, props.info[0]), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, props.info[1])));\n}\n\nconst useWindowWidth = () => {\n  const [windowWidth, setWindowWidth] = useState(window.innerWidth);\n  useEffect(() => {\n    const handleWindowResize = () => {\n      setWindowWidth(window.innerWidth);\n    };\n\n    window.addEventListener('resize', handleWindowResize);\n    return () => window.removeEventListener('resize', handleWindowResize);\n  }, [windowWidth]);\n  return windowWidth;\n};\n\nexport default SlideInfo;","map":{"version":3,"sources":["/Users/william/Documents/GitHub/portfolio/src/components/projectPage/slideInfo.js"],"names":["React","useState","useEffect","useRef","SlideInfo","props","isExpanded","toggleExpanded","width","useWindowWidth","document","addEventListener","handleMove","removeEventListener","e","offsetX","Math","abs","console","log","right","info","windowWidth","setWindowWidth","window","innerWidth","handleWindowResize"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;;AAEA,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AAExB,QAAM,CAACC,UAAD,EAAaC,cAAb,IAA+BN,QAAQ,CAAC,KAAD,CAA7C;AAEA,QAAMO,KAAK,GAAGC,cAAc,EAA5B;AAEAP,EAAAA,SAAS,CAAC,MAAM;AACd;AACAQ,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,WAA1B,EAAuCC,UAAvC,EAFc,CAGd;;AACA,WAAO,MAAM;AACXF,MAAAA,QAAQ,CAACG,mBAAT,CAA6B,WAA7B,EAA0CD,UAA1C;AACD,KAFD;AAGD,GAPQ,EAON,EAPM,CAAT;;AASA,QAAMA,UAAU,GAAGE,CAAC,IAAI;AACtB,QAAIA,CAAC,CAACC,OAAF,GAAYC,IAAI,CAACC,GAAL,CAAST,KAAK,GAAC,CAAf,CAAhB,EAAkC;AAChCU,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACD;AACF,GAJD;;AAMA,sBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAA0B,IAAA,KAAK,EAAE;AAACC,MAAAA,KAAK,EAAE,GAAEd,UAAU,GAAG,MAAH,GAAU,KAAM;AAApC,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,SAAS,EAAG,GAAEA,UAAU,GAAG,qBAAH,GAA2B,oBAAqB,EAD1E;AAEE,mBAAY,MAFd;AAGE,IAAA,OAAO,EAAE,MAAM;AAACC,MAAAA,cAAc,CAAC,CAACD,UAAF,CAAd;AAA6B,KAH/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAOE;AAAK,IAAA,SAAS,EAAG,aAAYA,UAAU,GAAG,UAAH,GAAc,WAAY,EAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKD,KAAK,CAACgB,IAAN,CAAW,CAAX,CAAL,CADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKhB,KAAK,CAACgB,IAAN,CAAW,CAAX,CAAL,CAFF,CAPF,CADF;AAcD;;AAED,MAAMZ,cAAc,GAAG,MAAM;AAC3B,QAAM,CAACa,WAAD,EAAcC,cAAd,IAAiCtB,QAAQ,CAACuB,MAAM,CAACC,UAAR,CAA/C;AAEAvB,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMwB,kBAAkB,GAAG,MAAM;AAC7BH,MAAAA,cAAc,CAACC,MAAM,CAACC,UAAR,CAAd;AACH,KAFD;;AAIAD,IAAAA,MAAM,CAACb,gBAAP,CAAwB,QAAxB,EAAkCe,kBAAlC;AACA,WAAO,MAAMF,MAAM,CAACX,mBAAP,CAA2B,QAA3B,EAAqCa,kBAArC,CAAb;AACH,GAPQ,EAOP,CAACJ,WAAD,CAPO,CAAT;AASA,SAAOA,WAAP;AACD,CAbD;;AAeA,eAAelB,SAAf","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\n\nfunction SlideInfo(props) {\n\n  const [isExpanded, toggleExpanded] = useState(false);\n\n  const width = useWindowWidth()\n\n  useEffect(() => {\n    // add when mounted\n    document.addEventListener(\"mousemove\", handleMove);\n    // return function to be called when unmounted\n    return () => {\n      document.removeEventListener(\"mousemove\", handleMove);\n    };\n  }, []);\n\n  const handleMove = e => {\n    if (e.offsetX > Math.abs(width/2)){\n      console.log('expanded')\n    }\n  }\n\n  return(\n    <div className='infoIcon' style={{right:`${isExpanded ? '30vw':'2vw'}`}}>\n      <i\n        className={`${isExpanded ? \"fa fa-chevron-right\" : \"fa fa-chevron-left\"}`}\n        aria-hidden=\"true\"\n        onClick={() => {toggleExpanded(!isExpanded);}}\n\n      />\n      <div className={`slideInfo ${isExpanded ? \"expanded\":\"collapsed\"}`}>\n        <h1>{props.info[0]}</h1>\n        <h2>{props.info[1]}</h2>\n      </div>\n    </div>\n  )\n}\n\nconst useWindowWidth = () => {\n  const [windowWidth, setWindowWidth ] = useState(window.innerWidth);\n\n  useEffect(() => {\n      const handleWindowResize = () => {\n          setWindowWidth(window.innerWidth);\n      };\n\n      window.addEventListener('resize', handleWindowResize);\n      return () => window.removeEventListener('resize', handleWindowResize);\n  },[windowWidth]);\n\n  return windowWidth;\n};\n\nexport default SlideInfo;\n"]},"metadata":{},"sourceType":"module"}