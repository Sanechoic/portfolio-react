{"ast":null,"code":"var _jsxFileName = \"/Users/william/Documents/GitHub/portfolio/src/components/projects/balancingRobot.js\";\nimport React from 'react'; // Import the Component component from React\n\nimport ProjectHeader from './../projectPage/ProjectHeader.js';\nimport HeroImage from './../projectPage/HeroImage.js';\nimport PhoneVideo from './../projectPage/PhoneVideo.js';\nimport Text from './../projectPage/Text.js';\nimport Divider from './../projectPage/Divider.js';\nconst data = {\n  'heroImage': require('./../../content/projects/balancingRobot/hero-image.png')\n};\nconst a = {\n  'title': 'Signal Processing',\n  'text': 'By measuring the energy of the sound signal, the beat of the song can be determined. On the beat, the energy of the sound peaks. The LED flash was then used to make sure that the program is detecting the beat correctly.',\n  'video': 'videos/balancingRobot/1.mp4'\n};\nconst b = {\n  'title': 'PID Control',\n  'text': 'By using PID (Proportional, Integral, Derivative) control the robot can balance on its own by using readings from the accelerometer and gyroscope and controlling the motors to counteract the motion of the robot as it falls over. The angle of the robot is calculated by combining the accelerometer reading, which suffers from high frequency noise, and the gyroscope reading, which suffers from low frequency noise, or drift. Combining these two readings helps to offset this noise. Proportional control scales the motor speed to the difference between the current angle and the desired angle (0 degrees to remain upright): the greater the difference, the faster the motor spins to counteract the motion. Integral control sums the difference in the current and desired angle over time. The longer the robot angle has been away from the desired angle (and the greater that difference is), the greater the motor speed will be. Derivative control measures the rate of change of angle. The faster  the angle moves away from the desired angle, the faster the motor speed. In the video on the left, bluetooth is used to control the robot by changing the desired angle.',\n  'video': 'videos/balancingRobot/2.mp4'\n};\nconst c = {\n  'title': 'Putting It All Together',\n  'text': 'Now that we are detecting the beat of the song and controlling the robot we can add some dance steps. By giving the robot some preset dance moves and arranging them into a list, the next dance move can be initiated on each beat. In the video on the left the robot performs its version of the traditional, Scottish \"Strip the Willow\" dance, wearing the proper attire of course.',\n  'video': 'videos/balancingRobot/3.mp4'\n};\n\nfunction BalancingRobot(props) {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ProjectHeader, {\n    projectKey: \"balancingRobot\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(HeroImage, {\n    heroImage: data.heroImage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Text, {\n    text: \"**Rhythm**\",\n    col: \"col-12\",\n    height: \"100px\",\n    align: \"left\",\n    font: \"100px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(PhoneVideo, {\n    text: a.text,\n    title: a.title,\n    video: a.video,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Text, {\n    text: \"**Balancing**\",\n    col: \"col-12\",\n    height: \"10px\",\n    align: \"left\",\n    font: \"100px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(PhoneVideo, {\n    text: b.text,\n    title: b.title,\n    video: b.video,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Text, {\n    text: \"**Dancing**\",\n    col: \"col-12\",\n    height: \"10px\",\n    align: \"left\",\n    font: \"100px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(PhoneVideo, {\n    text: c.text,\n    title: c.title,\n    video: c.video,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }));\n}\n\nexport default BalancingRobot;","map":{"version":3,"sources":["/Users/william/Documents/GitHub/portfolio/src/components/projects/balancingRobot.js"],"names":["React","ProjectHeader","HeroImage","PhoneVideo","Text","Divider","data","require","a","b","c","BalancingRobot","props","heroImage","text","title","video"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAA2B;;AAE3B,OAAOC,aAAP,MAA0B,mCAA1B;AACA,OAAOC,SAAP,MAAsB,+BAAtB;AACA,OAAOC,UAAP,MAAuB,gCAAvB;AACA,OAAOC,IAAP,MAAiB,0BAAjB;AAEA,OAAOC,OAAP,MAAoB,6BAApB;AAGA,MAAMC,IAAI,GAAG;AACX,eAAYC,OAAO,CAAC,wDAAD;AADR,CAAb;AAIA,MAAMC,CAAC,GAAG;AACR,WAAQ,mBADA;AAER,UAAO,6NAFC;AAGR,WAAQ;AAHA,CAAV;AAMA,MAAMC,CAAC,GAAG;AACR,WAAQ,aADA;AAER,UAAO,0oCAFC;AAGR,WAAQ;AAHA,CAAV;AAMA,MAAMC,CAAC,GAAG;AACR,WAAQ,yBADA;AAER,UAAO,0XAFC;AAGR,WAAQ;AAHA,CAAV;;AAMA,SAASC,cAAT,CAAwBC,KAAxB,EAA+B;AAC3B,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,aAAD;AACC,IAAA,UAAU,EAAC,gBADZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAIE,oBAAC,SAAD;AACC,IAAA,SAAS,EAAEN,IAAI,CAACO,SADjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,eAOE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,eAQE,oBAAC,IAAD;AACC,IAAA,IAAI,EAAC,YADN;AAEC,IAAA,GAAG,EAAC,QAFL;AAGC,IAAA,MAAM,EAAC,OAHR;AAIC,IAAA,KAAK,EAAC,MAJP;AAKC,IAAA,IAAI,EAAC,OALN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,eAeE,oBAAC,UAAD;AACE,IAAA,IAAI,EAAEL,CAAC,CAACM,IADV;AAEE,IAAA,KAAK,EAAEN,CAAC,CAACO,KAFX;AAGE,IAAA,KAAK,EAAEP,CAAC,CAACQ,KAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAfF,eAoBE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IApBF,eAqBE,oBAAC,IAAD;AACC,IAAA,IAAI,EAAC,eADN;AAEC,IAAA,GAAG,EAAC,QAFL;AAGC,IAAA,MAAM,EAAC,MAHR;AAIC,IAAA,KAAK,EAAC,MAJP;AAKC,IAAA,IAAI,EAAC,OALN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IArBF,eA4BE,oBAAC,UAAD;AACE,IAAA,IAAI,EAAEP,CAAC,CAACK,IADV;AAEE,IAAA,KAAK,EAAEL,CAAC,CAACM,KAFX;AAGE,IAAA,KAAK,EAAEN,CAAC,CAACO,KAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA5BF,eAiCE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAjCF,eAkCE,oBAAC,IAAD;AACC,IAAA,IAAI,EAAC,aADN;AAEC,IAAA,GAAG,EAAC,QAFL;AAGC,IAAA,MAAM,EAAC,MAHR;AAIC,IAAA,KAAK,EAAC,MAJP;AAKC,IAAA,IAAI,EAAC,OALN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAlCF,eAyCE,oBAAC,UAAD;AACE,IAAA,IAAI,EAAEN,CAAC,CAACI,IADV;AAEE,IAAA,KAAK,EAAEJ,CAAC,CAACK,KAFX;AAGE,IAAA,KAAK,EAAEL,CAAC,CAACM,KAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAzCF,CADF;AAiDH;;AAED,eAAeL,cAAf","sourcesContent":["import React from 'react'; // Import the Component component from React\n\nimport ProjectHeader from './../projectPage/ProjectHeader.js'\nimport HeroImage from './../projectPage/HeroImage.js'\nimport PhoneVideo from './../projectPage/PhoneVideo.js'\nimport Text from './../projectPage/Text.js'\n\nimport Divider from './../projectPage/Divider.js';\n\n\nconst data = {\n  'heroImage':require('./../../content/projects/balancingRobot/hero-image.png'),\n}\n\nconst a = {\n  'title':'Signal Processing',\n  'text':'By measuring the energy of the sound signal, the beat of the song can be determined. On the beat, the energy of the sound peaks. The LED flash was then used to make sure that the program is detecting the beat correctly.',\n  'video':'videos/balancingRobot/1.mp4',\n}\n\nconst b = {\n  'title':'PID Control',\n  'text':'By using PID (Proportional, Integral, Derivative) control the robot can balance on its own by using readings from the accelerometer and gyroscope and controlling the motors to counteract the motion of the robot as it falls over. The angle of the robot is calculated by combining the accelerometer reading, which suffers from high frequency noise, and the gyroscope reading, which suffers from low frequency noise, or drift. Combining these two readings helps to offset this noise. Proportional control scales the motor speed to the difference between the current angle and the desired angle (0 degrees to remain upright): the greater the difference, the faster the motor spins to counteract the motion. Integral control sums the difference in the current and desired angle over time. The longer the robot angle has been away from the desired angle (and the greater that difference is), the greater the motor speed will be. Derivative control measures the rate of change of angle. The faster  the angle moves away from the desired angle, the faster the motor speed. In the video on the left, bluetooth is used to control the robot by changing the desired angle.',\n  'video':'videos/balancingRobot/2.mp4',\n}\n\nconst c = {\n  'title':'Putting It All Together',\n  'text':'Now that we are detecting the beat of the song and controlling the robot we can add some dance steps. By giving the robot some preset dance moves and arranging them into a list, the next dance move can be initiated on each beat. In the video on the left the robot performs its version of the traditional, Scottish \"Strip the Willow\" dance, wearing the proper attire of course.',\n  'video':'videos/balancingRobot/3.mp4',\n}\n\nfunction BalancingRobot(props) {\n    return(\n      <div>\n        <ProjectHeader\n         projectKey='balancingRobot'\n        />\n        <HeroImage\n         heroImage={data.heroImage}\n        />\n        <Divider/>\n        <Text\n         text='**Rhythm**'\n         col=\"col-12\"\n         height=\"100px\"\n         align=\"left\"\n         font=\"100px\"\n        />\n        <PhoneVideo\n          text={a.text}\n          title={a.title}\n          video={a.video}\n        />\n        <Divider/>\n        <Text\n         text='**Balancing**'\n         col=\"col-12\"\n         height=\"10px\"\n         align=\"left\"\n         font=\"100px\"\n        />\n        <PhoneVideo\n          text={b.text}\n          title={b.title}\n          video={b.video}\n        />\n        <Divider/>\n        <Text\n         text='**Dancing**'\n         col=\"col-12\"\n         height=\"10px\"\n         align=\"left\"\n         font=\"100px\"\n        />\n        <PhoneVideo\n          text={c.text}\n          title={c.title}\n          video={c.video}\n        />\n      </div>\n    )\n}\n\nexport default BalancingRobot;\n"]},"metadata":{},"sourceType":"module"}