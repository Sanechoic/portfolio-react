{"ast":null,"code":"import { useCallback, useEffect, useRef } from 'react';\nexport const useClickOutsideListenerRef = onClose => {\n  const ref = useRef(null);\n  const escapeListener = useCallback(e => {\n    if (e.key === 'Escape') {\n      onClose();\n    }\n  }, []);\n  const clickListener = useCallback(e => {\n    if (!ref.current.contains(e.target)) {\n      onClose === null || onClose === void 0 ? void 0 : onClose();\n    }\n  }, [ref.current]);\n  useEffect(() => {\n    document.addEventListener('click', clickListener);\n    document.addEventListener('keyup', escapeListener);\n    return () => {\n      document.removeEventListener('click', clickListener);\n      document.removeEventListener('keyup', escapeListener);\n    };\n  }, []);\n  return ref;\n};","map":{"version":3,"sources":["/Users/william/Documents/GitHub/portfolio/src/components/hooks/useClickoutsideListenerRef.tsx"],"names":["useCallback","useEffect","useRef","useClickOutsideListenerRef","onClose","ref","escapeListener","e","key","clickListener","current","contains","target","document","addEventListener","removeEventListener"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,MAAjC,QAA+C,OAA/C;AAEA,OAAO,MAAMC,0BAA0B,GAAIC,OAAD,IAAyB;AACjE,QAAMC,GAAG,GAAGH,MAAM,CAAC,IAAD,CAAlB;AACA,QAAMI,cAAc,GAAGN,WAAW,CAAEO,CAAD,IAAsB;AACvD,QAAIA,CAAC,CAACC,GAAF,KAAU,QAAd,EAAwB;AACtBJ,MAAAA,OAAO;AACR;AACF,GAJiC,EAI/B,EAJ+B,CAAlC;AAKA,QAAMK,aAAa,GAAGT,WAAW,CAC9BO,CAAD,IAAmB;AACjB,QAAI,CAAEF,GAAG,CAACK,OAAL,CAAsBC,QAAtB,CAA+BJ,CAAC,CAACK,MAAjC,CAAL,EAA+C;AAC7CR,MAAAA,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO;AACR;AACF,GAL8B,EAM/B,CAACC,GAAG,CAACK,OAAL,CAN+B,CAAjC;AAQAT,EAAAA,SAAS,CAAC,MAAM;AACdY,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,OAA1B,EAAmCL,aAAnC;AACAI,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,OAA1B,EAAmCR,cAAnC;AACA,WAAO,MAAM;AACXO,MAAAA,QAAQ,CAACE,mBAAT,CAA6B,OAA7B,EAAsCN,aAAtC;AACAI,MAAAA,QAAQ,CAACE,mBAAT,CAA6B,OAA7B,EAAsCT,cAAtC;AACD,KAHD;AAID,GAPQ,EAON,EAPM,CAAT;AAQA,SAAOD,GAAP;AACD,CAxBM","sourcesContent":["import { useCallback, useEffect, useRef } from 'react'\n\nexport const useClickOutsideListenerRef = (onClose: () => void) => {\n  const ref = useRef(null)\n  const escapeListener = useCallback((e: KeyboardEvent) => {\n    if (e.key === 'Escape') {\n      onClose()\n    }\n  }, [])\n  const clickListener = useCallback(\n    (e: MouseEvent) => {\n      if (!(ref.current! as any).contains(e.target)) {\n        onClose?.()\n      }\n    },\n    [ref.current],\n  )\n  useEffect(() => {\n    document.addEventListener('click', clickListener)\n    document.addEventListener('keyup', escapeListener)\n    return () => {\n      document.removeEventListener('click', clickListener)\n      document.removeEventListener('keyup', escapeListener)\n    }\n  }, [])\n  return ref\n}\n"]},"metadata":{},"sourceType":"module"}