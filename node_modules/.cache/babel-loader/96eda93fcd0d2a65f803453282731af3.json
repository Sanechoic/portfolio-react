{"ast":null,"code":"var _jsxFileName = \"/Users/william/Documents/GitHub/portfolio/src/components/projectPage/slideImage.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Lightbox } from \"react-modal-image\";\n\nfunction SlideImage(props) {\n  const mobile = useWindowWidth() <= 991;\n  useEffect(() => {\n    // add when mounted\n    document.addEventListener(\"click\", handleClick); // return function to be called when unmounted\n\n    return () => {\n      document.removeEventListener(\"click\", handleClick);\n    };\n  }, [lightbox]);\n\n  const handleClick = e => {\n    if (slide.current.contains(e.target)) {\n      toggleLightbox(true);\n      return;\n    }\n\n    if (lb.current.contains(e.target)) {\n      toggleLightbox(false);\n      return;\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Lightbox, {\n    medium: urlToLargeImageFile,\n    large: urlToHugeImageFile,\n    alt: \"Hello World!\",\n    onClose: this.closeLightbox,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"slide\",\n    ref: slide,\n    style: {\n      backgroundImage: \"url(\" + (mobile ? \"\" : props.image) + \")\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: mobile ? props.image : \"\",\n    style: {\n      display: mobile ? \"\" : \"none\"\n    },\n    alt: \"default\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  })));\n}\n\nconst useWindowWidth = () => {\n  const [windowWidth, setWindowWidth] = useState(window.innerWidth);\n  useEffect(() => {\n    const handleWindowResize = () => {\n      setWindowWidth(window.innerWidth);\n    };\n\n    window.addEventListener('resize', handleWindowResize);\n    return () => window.removeEventListener('resize', handleWindowResize);\n  }, [windowWidth]);\n  return windowWidth;\n};\n\nexport default SlideImage;","map":{"version":3,"sources":["/Users/william/Documents/GitHub/portfolio/src/components/projectPage/slideImage.js"],"names":["React","useState","useEffect","useRef","Lightbox","SlideImage","props","mobile","useWindowWidth","document","addEventListener","handleClick","removeEventListener","lightbox","e","slide","current","contains","target","toggleLightbox","lb","urlToLargeImageFile","urlToHugeImageFile","closeLightbox","backgroundImage","image","display","windowWidth","setWindowWidth","window","innerWidth","handleWindowResize"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,SAASC,QAAT,QAAyB,mBAAzB;;AAEA,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AACzB,QAAMC,MAAM,GAAGC,cAAc,MAAM,GAAnC;AAIAN,EAAAA,SAAS,CAAC,MAAM;AACd;AACAO,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,OAA1B,EAAmCC,WAAnC,EAFc,CAGd;;AACA,WAAO,MAAM;AACXF,MAAAA,QAAQ,CAACG,mBAAT,CAA6B,OAA7B,EAAsCD,WAAtC;AACD,KAFD;AAGD,GAPQ,EAON,CAACE,QAAD,CAPM,CAAT;;AASA,QAAMF,WAAW,GAAGG,CAAC,IAAI;AACvB,QAAIC,KAAK,CAACC,OAAN,CAAcC,QAAd,CAAuBH,CAAC,CAACI,MAAzB,CAAJ,EAAsC;AACpCC,MAAAA,cAAc,CAAC,IAAD,CAAd;AACA;AACD;;AACD,QAAIC,EAAE,CAACJ,OAAH,CAAWC,QAAX,CAAoBH,CAAC,CAACI,MAAtB,CAAJ,EAAmC;AACjCC,MAAAA,cAAc,CAAC,KAAD,CAAd;AACA;AACD;AACF,GATD;;AAWA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,QAAD;AACE,IAAA,MAAM,EAAEE,mBADV;AAEE,IAAA,KAAK,EAAEC,kBAFT;AAGE,IAAA,GAAG,EAAC,cAHN;AAIE,IAAA,OAAO,EAAE,KAAKC,aAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAOE;AAAK,IAAA,SAAS,EAAC,OAAf;AAAuB,IAAA,GAAG,EAAER,KAA5B;AAAmC,IAAA,KAAK,EAAE;AAACS,MAAAA,eAAe,EAAC,UAAQjB,MAAM,GAAG,EAAH,GAAQD,KAAK,CAACmB,KAA5B,IAAmC;AAApD,KAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,GAAG,EAAElB,MAAM,GAAGD,KAAK,CAACmB,KAAT,GAAiB,EAAjC;AAAqC,IAAA,KAAK,EAAE;AAACC,MAAAA,OAAO,EAAEnB,MAAM,GAAG,EAAH,GAAQ;AAAxB,KAA5C;AAA8E,IAAA,GAAG,EAAC,SAAlF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAPF,CADF;AAaD;;AAED,MAAMC,cAAc,GAAG,MAAM;AAC3B,QAAM,CAACmB,WAAD,EAAcC,cAAd,IAAiC3B,QAAQ,CAAC4B,MAAM,CAACC,UAAR,CAA/C;AAEA5B,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAM6B,kBAAkB,GAAG,MAAM;AAC7BH,MAAAA,cAAc,CAACC,MAAM,CAACC,UAAR,CAAd;AACH,KAFD;;AAIAD,IAAAA,MAAM,CAACnB,gBAAP,CAAwB,QAAxB,EAAkCqB,kBAAlC;AACA,WAAO,MAAMF,MAAM,CAACjB,mBAAP,CAA2B,QAA3B,EAAqCmB,kBAArC,CAAb;AACH,GAPQ,EAOP,CAACJ,WAAD,CAPO,CAAT;AASA,SAAOA,WAAP;AACD,CAbD;;AAeA,eAAetB,UAAf","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { Lightbox } from \"react-modal-image\";\n\nfunction SlideImage(props) {\n  const mobile = useWindowWidth() <= 991;\n\n\n\n  useEffect(() => {\n    // add when mounted\n    document.addEventListener(\"click\", handleClick);\n    // return function to be called when unmounted\n    return () => {\n      document.removeEventListener(\"click\", handleClick);\n    };\n  }, [lightbox]);\n\n  const handleClick = e => {\n    if (slide.current.contains(e.target)) {\n      toggleLightbox(true);\n      return;\n    }\n    if (lb.current.contains(e.target)) {\n      toggleLightbox(false);\n      return;\n    }\n  };\n\n  return(\n    <div>\n      <Lightbox\n        medium={urlToLargeImageFile}\n        large={urlToHugeImageFile}\n        alt=\"Hello World!\"\n        onClose={this.closeLightbox}\n      />\n      <div className=\"slide\" ref={slide} style={{backgroundImage:\"url(\"+(mobile ? \"\" : props.image)+\")\"}}>\n        <img src={mobile ? props.image : \"\"} style={{display:(mobile ? \"\" : \"none\")}} alt=\"default\"/>\n      </div>\n    </div>\n  )\n}\n\nconst useWindowWidth = () => {\n  const [windowWidth, setWindowWidth ] = useState(window.innerWidth);\n\n  useEffect(() => {\n      const handleWindowResize = () => {\n          setWindowWidth(window.innerWidth);\n      };\n\n      window.addEventListener('resize', handleWindowResize);\n      return () => window.removeEventListener('resize', handleWindowResize);\n  },[windowWidth]);\n\n  return windowWidth;\n};\n\nexport default SlideImage;\n"]},"metadata":{},"sourceType":"module"}