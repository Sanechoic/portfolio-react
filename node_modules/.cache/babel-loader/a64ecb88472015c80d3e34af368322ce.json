{"ast":null,"code":"var _jsxFileName = \"/Users/william/Documents/GitHub/portfolio/src/components/projects/blueNote.js\";\nimport React from 'react'; // Import the Component component from React\n\nimport ProjectHeader from './../projectPage/ProjectHeader.js';\nimport SectionOne from './../projectPage/SectionOne.js';\nimport Image from './../projectPage/Image.js';\nimport Text from './../projectPage/Text.js';\nimport ReactPlayer from 'react-player';\nimport Divider from './../projectPage/Divider.js';\nconst data = {\n  'heroVideo': require('./../../content/projects/blueNote/hero.mp4')\n};\nconst a = {\n  'image': require('./../../content/projects/blueNote/3.png'),\n  'image2': require('./../../content/projects/blueNote/1.png'),\n  'image3': require('./../../content/projects/blueNote/2.png')\n};\nconst c = {\n  'col': 'col-3',\n  'height': '650px',\n  'image': require('./../../content/projects/blueNote/4.png'),\n  'image2': require('./../../content/projects/blueNote/5.png'),\n  'image3': require('./../../content/projects/blueNote/6.png'),\n  'image4': require('./../../content/projects/blueNote/7.png'),\n  'image5': require('./../../content/projects/blueNote/8.png')\n};\nconst d = {\n  'image': require('./../../content/projects/blueNote/9.png'),\n  'image2': require('./../../content/projects/blueNote/10.png')\n};\n\nfunction BlueNote(props) {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ProjectHeader, {\n    projectKey: \"blueNote\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"hero-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ReactPlayer, {\n    className: \"react-player\",\n    url: data.heroVideo,\n    volume: 10,\n    height: \"auto\",\n    width: \"100%\",\n    controls: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Text, {\n    text: \"Background\",\n    col: \"col-12\",\n    align: \"left\",\n    type: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Text, {\n    text: \"Introduction\",\n    col: \"col-12\",\n    type: \"sectionOne-title\",\n    margin: \"0px 84px 0px 84px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Text, {\n    text: \"As modern communications technology develops and the number of connected devices and applications proliferates, so to do the instances and opportunities for distraction, particularly through notifications and the ensuing anxiety when receiving to many of them, or, too few. Notifications are generally triggered by an event (a message has been received) or at a given time. Location based notifications are becoming more prevalent but it can be difficult create an indoor positioning system (IPS) using traditional satellite navigation systems (GPS) methods. BLE technology offers an opportunity to determine relative, and by extension absolute, location in a precise fashion using signal strength triangulation. Combine this with location specific notifications and you have a system that reduces notification related information overload and anxiety. Let\\u2019s say you wish to have notifications turned off when your phone is in your bedroom, or you only want this morning\\u2019s emails once you\\u2019ve gotten downstairs to your study. Numerous possibilities present themselves for the user who wishes to declutter their life and regain some personal bandwidth.\",\n    col: \"col-12\",\n    align: \"left\",\n    type: \"text\",\n    font: \"15px\",\n    margin: \"20px 120px 100px 84px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Text, {\n    text: \"System Design\",\n    col: \"col-12\",\n    align: \"left\",\n    type: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(SectionOne, {\n    title: \"System Diagram\",\n    text: \"The app allows you to select which tube lines you would like notifications for. In the event that there is a disruption to one of those lines and other configurable conditions are met (e.g. you are downstairs between 0700 and 1000) then a group alert will be generated with one entry for each selected tube line with a description of the delay. Likewise the user selects which BLE devices are the ones to use for triangulation. BLE is used because it doesn\\u2019t consume much battery, little information needs to be sent in this application and no connection needs to be maintained for the app to work. The main communications protocols employed are HTTP and BLE. Each BLE scan triggers a corresponding HTTP POST request that sends data to the respective database. TFL API data and BLE RSSI data are collected periodically by the phone app. All TFL API data is collected whereas only selected BLE devices have their RSSI, service and characteristic information stored. When the user loads one of the app pages, the data is retrieved on demand using asynchronous HTTP requests or BLE scans. \\u201CServerless\\u201D computing is employed wherever possible to ensure uptime and reduce the maintenance burden. Data can be pulled from the respective databases for analysis.\",\n    image: a.image,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Text, {\n    text: \"Data Storage\",\n    col: \"col-12\",\n    align: \"left\",\n    type: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(SectionOne, {\n    title: \"TFL API Data\",\n    text: \"Tube line status is collected using the TFL API (https://api.tfl.gov.uk). For data analytics, TFL API data was requested every 10 minutes (0.00167 Hz) from 03/12/19 until 29/12/19. This was the maximum rate that could be achieved without incurring significant costs, however is was deemed to be above the required theoretical minimum (Nyquist).The data is stored in AWS (Amazon Web Services) DynamoDB NoSQL tables. The serverless, AWS Lambda script which pulls the data from the TFL API is triggered using an HTTP request with API key authentication periodically from the phone app.\",\n    image: a.image2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(SectionOne, {\n    title: \"Bluetooth Beacon Data\",\n    text: \"Three Bluetooth beacons have been set up in different parts of the house and the phone app periodically checks the respective RSSIs (received signal strength indication) every 5 seconds (0.2 Hz), which are then used as a proxy for distance. This was the maximum rate that could be achieved without incurring significant costs, however is was deemed to be above the required theoretical minimum. From here, the position of the phone can be determined through triangulation.\",\n    image: a.image3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Text, {\n    text: \"Prototype - BlueNote App\",\n    col: \"col-12\",\n    align: \"left\",\n    type: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(SectionOne, {\n    title: \"Tube Lines\",\n    text: \"The primary actuation is the notification sent to the phone via the app in the instance of a disruption to a selected line, as well as the user coming into the lounge with their phone between 0700 and 1000. The BLE beacons must all be detected before a notification will send. The app was built using Flutter to have a shared codebase for IOS and Android. Users can select the tube lines which they would like to receive notifications from in the event of disruption.\",\n    image: c.image,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(SectionOne, {\n    title: \"BLE Beacons\",\n    text: \"Users can select which bluetooth beacons to use for position detecting.\",\n    image: c.image2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Text, {\n    text: \"Notifications\",\n    col: \"col-12\",\n    type: \"sectionOne-title\",\n    margin: \"0px 84px 0px 84px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row justify-content-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Image, {\n    image: c.image3,\n    col: c.col,\n    height: c.height,\n    margin: \"50px 0px 20px 0px\",\n    padding: \"0px 0px 0px 0px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Image, {\n    image: c.image4,\n    col: c.col,\n    height: c.height,\n    margin: \"50px 60px 20px 60px\",\n    padding: \"0px 0px 0px 0px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Image, {\n    image: c.image5,\n    col: c.col,\n    height: c.height,\n    margin: \"50px 0px 20px 0px\",\n    padding: \"0px 0px 0px 0px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Text, {\n    text: \"In the event of disruption on your selected lines, BlueNote will send notifications with expandable detail available. This way, you do not need to constantly check the status of TFL and will only receive the notification when you are in a desired location.\",\n    col: \"col-12\",\n    align: \"left\",\n    type: \"text\",\n    font: \"15px\",\n    margin: \"20px 120px 100px 84px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Text, {\n    text: \"Data Analysis\",\n    col: \"col-12\",\n    align: \"left\",\n    type: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Text, {\n    text: \"TFL Data - Predicting Disruption\",\n    col: \"col-12\",\n    type: \"sectionOne-title\",\n    margin: \"0px 84px 0px 84px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Image, {\n    image: d.image,\n    col: \"col-12\",\n    height: \"500px\",\n    margin: \"50px 0px 20px 0px\",\n    padding: \"0px 100px 0px 100px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Text, {\n    text: \"In order to estimate to probability of disruption between any given hour of the day, any disruption was modelled as 1 and good service as 0. The proportion of readings during any given hour that are disruptive is used to estimate the probability of disruption. The disruption is minimal in the small hours of the morning when only a few of the lines are running a night service and the majority of the lines are closed. The disruption rate rises to a peak of roughly 0.3 (30%) at 0900, and falls sharply, evening out in the mid afternoon and decreasing more steadily. A potential inference from this is that the disruptions are generally as a result of \\u201Crush-hour\\u201D in the morning where frayed tensions and congestion dramatically increase the chance of disruption. This model fits well with existing intuition and thus may not be used directly but can confirm that between 0700 and 1000 are suitable times for an alert window (although the user will be able to adjust this interval).\",\n    col: \"col-12\",\n    align: \"left\",\n    type: \"text\",\n    font: \"15px\",\n    margin: \"20px 120px 100px 84px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(SectionOne, {\n    title: \"BLE Data - Detecting Location\",\n    text: \"There are three main areas where my phone is usually located: the lounge, the attic or the bedroom. As such, for the K-Means clustering feature identification process, the number of clusters was set at 3. By inference from the RSSI values, the clusters could be identified. The cluster with the highest (least negative) lounge RSSI values must be the lounge, the one with the lowest RSSI values across the board must be the attic and final the section with the highest bedroom RSSI values must be the bedroom.\",\n    image: d.image2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Text, {\n    text: \"Implications\",\n    col: \"col-12\",\n    type: \"sectionOne-title\",\n    margin: \"0px 84px 0px 84px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Text, {\n    text: \"Once user indoor location can be judged with sufficient accuracy, many options become available for delivering notifications with maximised immediate utility and relevance, which may be acted on immediately and then forgotten about, freeing up personal bandwidth to think about other things. The app itself should be opened as little as possible, except for configuration. Ideally it is the app that you configure and then forget about. It is possible that interventions such as this will become more prevalent in future as users seek to compromise between connectivity and information overload. The user may also get an inclination as to how much time they are really spending in different parts of the house (and thus involved in corresponding activities).\",\n    col: \"col-12\",\n    align: \"left\",\n    type: \"text\",\n    font: \"15px\",\n    margin: \"20px 120px 100px 84px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Text, {\n    text: \"Security and Privacy\",\n    col: \"col-12\",\n    type: \"sectionOne-title\",\n    margin: \"0px 84px 0px 84px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Text, {\n    text: \"As demonstrated from the BLE data, a significant amount of personal information can be inferred from the data. It may, for example, be possible to tell if a user is spending a lot of time in the bathroom, or whether or not they\\u2019ve left their house. It is imperative that the BLE data and model training for each user would be done on the client side if possible.\",\n    col: \"col-12\",\n    align: \"left\",\n    type: \"text\",\n    font: \"15px\",\n    margin: \"20px 120px 100px 84px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 9\n    }\n  }));\n}\n\nexport default BlueNote;","map":{"version":3,"sources":["/Users/william/Documents/GitHub/portfolio/src/components/projects/blueNote.js"],"names":["React","ProjectHeader","SectionOne","Image","Text","ReactPlayer","Divider","data","require","a","c","d","BlueNote","props","heroVideo","image","image2","image3","col","height","image4","image5"],"mappings":"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","sourcesContent":["import React from 'react'; // Import the Component component from React\n\nimport ProjectHeader from './../projectPage/ProjectHeader.js'\nimport SectionOne from './../projectPage/SectionOne.js'\nimport Image from './../projectPage/Image.js'\nimport Text from './../projectPage/Text.js'\nimport ReactPlayer from 'react-player'\n\n\nimport Divider from './../projectPage/Divider.js';\n\n\nconst data = {\n  'heroVideo':require('./../../content/projects/blueNote/hero.mp4'),\n}\n\nconst a = {\n  'image':require('./../../content/projects/blueNote/3.png'),\n  'image2':require('./../../content/projects/blueNote/1.png'),\n  'image3':require('./../../content/projects/blueNote/2.png'),\n}\n\nconst c = {\n  'col':'col-3',\n  'height':'650px',\n  'image':require('./../../content/projects/blueNote/4.png'),\n  'image2':require('./../../content/projects/blueNote/5.png'),\n  'image3':require('./../../content/projects/blueNote/6.png'),\n  'image4':require('./../../content/projects/blueNote/7.png'),\n  'image5':require('./../../content/projects/blueNote/8.png'),\n}\n\nconst d = {\n  'image':require('./../../content/projects/blueNote/9.png'),\n  'image2':require('./../../content/projects/blueNote/10.png'),\n}\n\nfunction BlueNote(props) {\n    return(\n      <div>\n        <ProjectHeader\n         projectKey='blueNote'\n        />\n        <div className=\"hero-wrapper\">\n          <ReactPlayer\n           className='react-player'\n           url={data.heroVideo}\n           volume={10}\n           height='auto'\n           width='100%'\n           controls\n          />\n        </div>\n        <Divider/>\n        <Text\n         text='Background'\n         col=\"col-12\"\n         align=\"left\"\n         type=\"title\"\n        />\n        <Text\n         text='Introduction'\n         col=\"col-12\"\n         type=\"sectionOne-title\"\n         margin=\"0px 84px 0px 84px\"\n        />\n        <Text\n         text=\"As modern communications technology develops and the number of connected devices and applications proliferates, so to do the instances and opportunities for distraction, particularly through notifications and the ensuing anxiety when receiving to many of them, or, too few. Notifications are generally triggered by an event (a message has been received) or at a given time. Location based notifications are becoming more prevalent but it can be difficult create an indoor positioning system (IPS) using traditional satellite navigation systems (GPS) methods. BLE technology offers an opportunity to determine relative, and by extension absolute, location in a precise fashion using signal strength triangulation. Combine this with location specific notifications and you have a system that reduces notification related information overload and anxiety. Let’s say you wish to have notifications turned off when your phone is in your bedroom, or you only want this morning’s emails once you’ve gotten downstairs to your study. Numerous possibilities present themselves for the user who wishes to declutter their life and regain some personal bandwidth.\"\n         col=\"col-12\"\n         align=\"left\"\n         type=\"text\"\n         font=\"15px\"\n         margin=\"20px 120px 100px 84px\"\n        />\n        <Divider/>\n        <Text\n         text='System Design'\n         col=\"col-12\"\n         align=\"left\"\n         type=\"title\"\n        />\n        <SectionOne\n         title=\"System Diagram\"\n         text=\"The app allows you to select which tube lines you would like notifications for. In the event that there is a disruption to one of those lines and other configurable conditions are met (e.g. you are downstairs between 0700 and 1000) then a group alert will be generated with one entry for each selected tube line with a description of the delay. Likewise the user selects which BLE devices are the ones to use for triangulation. BLE is used because it doesn’t consume much battery, little information needs to be sent in this application and no connection needs to be maintained for the app to work. The main communications protocols employed are HTTP and BLE. Each BLE scan triggers a corresponding HTTP POST request that sends data to the respective database. TFL API data and BLE RSSI data are collected periodically by the phone app. All TFL API data is collected whereas only selected BLE devices have their RSSI, service and characteristic information stored. When the user loads one of the app pages, the data is retrieved on demand using asynchronous HTTP requests or BLE scans. “Serverless” computing is employed wherever possible to ensure uptime and reduce the maintenance burden. Data can be pulled from the respective databases for analysis.\"\n         image={a.image}\n        />\n        <Divider/>\n        <Text\n         text='Data Storage'\n         col=\"col-12\"\n         align=\"left\"\n         type=\"title\"\n        />\n        <SectionOne\n         title=\"TFL API Data\"\n         text=\"Tube line status is collected using the TFL API (https://api.tfl.gov.uk). For data analytics, TFL API data was requested every 10 minutes (0.00167 Hz) from 03/12/19 until 29/12/19. This was the maximum rate that could be achieved without incurring significant costs, however is was deemed to be above the required theoretical minimum (Nyquist).The data is stored in AWS (Amazon Web Services) DynamoDB NoSQL tables. The serverless, AWS Lambda script which pulls the data from the TFL API is triggered using an HTTP request with API key authentication periodically from the phone app.\"\n         image={a.image2}\n        />\n        <SectionOne\n         title=\"Bluetooth Beacon Data\"\n         text=\"Three Bluetooth beacons have been set up in different parts of the house and the phone app periodically checks the respective RSSIs (received signal strength indication) every 5 seconds (0.2 Hz), which are then used as a proxy for distance. This was the maximum rate that could be achieved without incurring significant costs, however is was deemed to be above the required theoretical minimum. From here, the position of the phone can be determined through triangulation.\"\n         image={a.image3}\n        />\n        <Divider/>\n        <Text\n         text='Prototype - BlueNote App'\n         col=\"col-12\"\n         align=\"left\"\n         type=\"title\"\n        />\n        <SectionOne\n         title=\"Tube Lines\"\n         text=\"The primary actuation is the notification sent to the phone via the app in the instance of a disruption to a selected line, as well as the user coming into the lounge with their phone between 0700 and 1000. The BLE beacons must all be detected before a notification will send. The app was built using Flutter to have a shared codebase for IOS and Android. Users can select the tube lines which they would like to receive notifications from in the event of disruption.\"\n         image={c.image}\n        />\n        <SectionOne\n         title=\"BLE Beacons\"\n         text=\"Users can select which bluetooth beacons to use for position detecting.\"\n         image={c.image2}\n        />\n        <Text\n         text='Notifications'\n         col=\"col-12\"\n         type=\"sectionOne-title\"\n         margin=\"0px 84px 0px 84px\"\n        />\n        <div className=\"row justify-content-center\">\n          <Image\n           image={c.image3}\n           col={c.col}\n           height={c.height}\n           margin=\"50px 0px 20px 0px\"\n           padding=\"0px 0px 0px 0px\"\n          />\n          <Image\n           image={c.image4}\n           col={c.col}\n           height={c.height}\n           margin=\"50px 60px 20px 60px\"\n           padding=\"0px 0px 0px 0px\"\n          />\n          <Image\n           image={c.image5}\n           col={c.col}\n           height={c.height}\n           margin=\"50px 0px 20px 0px\"\n           padding=\"0px 0px 0px 0px\"\n          />\n        </div>\n        <Text\n         text=\"In the event of disruption on your selected lines, BlueNote will send notifications with expandable detail available. This way, you do not need to constantly check the status of TFL and will only receive the notification when you are in a desired location.\"\n         col=\"col-12\"\n         align=\"left\"\n         type=\"text\"\n         font=\"15px\"\n         margin=\"20px 120px 100px 84px\"\n        />\n        <Divider/>\n        <Text\n         text='Data Analysis'\n         col=\"col-12\"\n         align=\"left\"\n         type=\"title\"\n        />\n        <Text\n         text='TFL Data - Predicting Disruption'\n         col=\"col-12\"\n         type=\"sectionOne-title\"\n         margin=\"0px 84px 0px 84px\"\n        />\n        <Image\n         image={d.image}\n         col=\"col-12\"\n         height=\"500px\"\n         margin=\"50px 0px 20px 0px\"\n         padding=\"0px 100px 0px 100px\"\n        />\n        <Text\n         text=\"In order to estimate to probability of disruption between any given hour of the day, any disruption was modelled as 1 and good service as 0. The proportion of readings during any given hour that are disruptive is used to estimate the probability of disruption. The disruption is minimal in the small hours of the morning when only a few of the lines are running a night service and the majority of the lines are closed. The disruption rate rises to a peak of roughly 0.3 (30%) at 0900, and falls sharply, evening out in the mid afternoon and decreasing more steadily. A potential inference from this is that the disruptions are generally as a result of “rush-hour” in the morning where frayed tensions and congestion dramatically increase the chance of disruption. This model fits well with existing intuition and thus may not be used directly but can confirm that between 0700 and 1000 are suitable times for an alert window (although the user will be able to adjust this interval).\"\n         col=\"col-12\"\n         align=\"left\"\n         type=\"text\"\n         font=\"15px\"\n         margin=\"20px 120px 100px 84px\"\n        />\n        <SectionOne\n         title=\"BLE Data - Detecting Location\"\n         text=\"There are three main areas where my phone is usually located: the lounge, the attic or the bedroom. As such, for the K-Means clustering feature identification process, the number of clusters was set at 3. By inference from the RSSI values, the clusters could be identified. The cluster with the highest (least negative) lounge RSSI values must be the lounge, the one with the lowest RSSI values across the board must be the attic and final the section with the highest bedroom RSSI values must be the bedroom.\"\n         image={d.image2}\n        />\n        <Text\n         text='Implications'\n         col=\"col-12\"\n         type=\"sectionOne-title\"\n         margin=\"0px 84px 0px 84px\"\n        />\n        <Text\n         text=\"Once user indoor location can be judged with sufficient accuracy, many options become available for delivering notifications with maximised immediate utility and relevance, which may be acted on immediately and then forgotten about, freeing up personal bandwidth to think about other things. The app itself should be opened as little as possible, except for configuration. Ideally it is the app that you configure and then forget about. It is possible that interventions such as this will become more prevalent in future as users seek to compromise between connectivity and information overload. The user may also get an inclination as to how much time they are really spending in different parts of the house (and thus involved in corresponding activities).\"\n         col=\"col-12\"\n         align=\"left\"\n         type=\"text\"\n         font=\"15px\"\n         margin=\"20px 120px 100px 84px\"\n        />\n        <Text\n         text='Security and Privacy'\n         col=\"col-12\"\n         type=\"sectionOne-title\"\n         margin=\"0px 84px 0px 84px\"\n        />\n        <Text\n         text=\"As demonstrated from the BLE data, a significant amount of personal information can be inferred from the data. It may, for example, be possible to tell if a user is spending a lot of time in the bathroom, or whether or not they’ve left their house. It is imperative that the BLE data and model training for each user would be done on the client side if possible.\"\n         col=\"col-12\"\n         align=\"left\"\n         type=\"text\"\n         font=\"15px\"\n         margin=\"20px 120px 100px 84px\"\n        />\n      </div>\n    )\n}\n\nexport default BlueNote;\n"]},"metadata":{},"sourceType":"module"}